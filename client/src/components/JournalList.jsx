import { useCallback, useEffect, useState } from "react";
import Calls from "../utils/api";
import JournalItem from "../components/JournalItem";
import DataLoader from "./DataLoader";

// Komponenta JournalList je zodpovƒõdn√° za zobrazen√≠ seznamu den√≠k≈Ø
const JournalList = () => {
  // Stavy komponenty pro ukl√°d√°n√≠ seznamu den√≠k≈Ø, informace o naƒç√≠t√°n√≠ a chybov√Ωch hl√°≈°en√≠ch
  const [journals, setJournals] = useState([]); // üóÇÔ∏è Ukl√°d√° seznam den√≠k≈Ø
  const [loading, setLoading] = useState(true); // ‚è≥ Indikuje, zda se data naƒç√≠taj√≠
  const [error, setError] = useState(null); // ‚ö†Ô∏è Ukl√°d√° chybov√° hl√°≈°en√≠, pokud nastanou

  // Funkce pro naƒçten√≠ seznamu den√≠k≈Ø z API
  const journalList = useCallback(async () => {
    try {
      setLoading(true); // Nastav√≠ stav naƒç√≠t√°n√≠ na true
      const data = await Calls.journalList(); // Zavol√° API a naƒçte seznam den√≠k≈Ø
      setJournals(data); // Ulo≈æ√≠ naƒçten√° data do stavu journals
    } catch (err) {
      setError(err.message); // Ulo≈æ√≠ chybovou zpr√°vu, pokud dojde k chybƒõ p≈ôi naƒç√≠t√°n√≠
    } finally {
      setLoading(false); // Nastav√≠ stav naƒç√≠t√°n√≠ na false
    }
  }, []); // Z√°vislosti pr√°zdn√©, funkce se memorizuje a nebude se mƒõnit p≈ôi ka≈æd√©m renderu

  // Funkce pro smaz√°n√≠ den√≠ku
  const handleDelete = (id, name) => async () => {
    // Zobraz√≠ potvrzovac√≠ dialog pro smaz√°n√≠ den√≠ku
    if (window.confirm(`Opravdu chce≈° smazat tento den√≠k? ${name}?`)) {
      try {
        await Calls.journalDelete(id); // Zavol√° API pro smaz√°n√≠ den√≠ku
        journalList(); // Aktualizuje seznam den√≠k≈Ø po √∫spƒõ≈°n√©m smaz√°n√≠
      } catch (error) {
        console.error("Error deleting journal:", error); // Logov√°n√≠ chyby do konzole
        setError(error.message); // Ulo≈æen√≠ chybov√© zpr√°vy do stavu
      }
    }
  };

  // Funkce pro p≈ôejmenov√°n√≠ den√≠ku
  const handleRename = (id) => async () => {
    // Zobraz√≠ prompt pro zad√°n√≠ nov√©ho jm√©na den√≠ku
    const newName = window.prompt("Napi≈° nov√Ω jm√©no den√≠ku: ");
    if (newName) {
      try {
        await Calls.journalUpdate({
          id: id, // ID den√≠ku, kter√Ω se m√° p≈ôejmenovat
          newName: newName, // Nov√© jm√©no den√≠ku
        });
        journalList(); // Aktualizuje seznam den√≠k≈Ø po √∫spƒõ≈°n√©m p≈ôejmenov√°n√≠
      } catch (error) {
        console.error("Error renaming journal:", error); // Logov√°n√≠ chyby do konzole
        setError(error.message); // Ulo≈æen√≠ chybov√© zpr√°vy do stavu
      }
    }
  };

  // Pou≈æit√≠ efektu pro naƒçten√≠ seznamu den√≠k≈Ø p≈ôi inicializaci komponenty
  useEffect(() => {
    journalList(); // Zavol√° funkci pro naƒçten√≠ seznamu den√≠k≈Ø
  }, [journalList]); // Efekt z√°vis√≠ na funkci journalList

  // Funkce pro vytvo≈ôen√≠ nov√©ho den√≠ku
  const handleCreateNewJournal = async () => {
    // Zobraz√≠ prompt pro zad√°n√≠ jm√©na nov√©ho den√≠ku
    const journalName = window.prompt("Enter the name for the new journal:");
    if (journalName) {
      try {
        await Calls.journalCreate({ name: journalName }); // Zavol√° API pro vytvo≈ôen√≠ nov√©ho den√≠ku
        journalList(); // Aktualizuje seznam den√≠k≈Ø po √∫spƒõ≈°n√©m vytvo≈ôen√≠
      } catch (error) {
        console.error("Error creating new journal:", error); // Logov√°n√≠ chyby do konzole
        setError(error.message); // Ulo≈æen√≠ chybov√© zpr√°vy do stavu
      }
    }
  };

  // Ovƒõ≈ô√≠, zda je seznam den√≠k≈Ø platn√Ω a je ve formƒõ pole
  if (!Array.isArray(journals)) return null;

  return (
    // Komponenta DataLoader zaji≈°≈•uje naƒç√≠t√°n√≠ dat a zobrazen√≠ chybov√Ωch hl√°≈°en√≠
    <DataLoader
      url="http://localhost:8000/journals"
      loading={loading}
      error={error}
    >
      {/* Kontejner pro zobrazen√≠ seznamu den√≠k≈Ø jako m≈ô√≠≈æky */}
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6 p-6">
        {/* Tlaƒç√≠tko pro vytvo≈ôen√≠ nov√©ho den√≠ku */}
        <div
          onClick={handleCreateNewJournal} // Kliknut√≠ vyvol√° vytvo≈ôen√≠ nov√©ho den√≠ku
          className="tile add-tile-base"
          >
            <div className="mb-3 flex items-center justify-center">
              <div className="w-16 h-16 flex items-center justify-center">
                <span className="text-3xl">+</span>
              </div>
            </div>
          </div>
        {/* Mapov√°n√≠ den√≠k≈Ø na komponenty JournalItem */}
        {journals.map((journal) => (
          <JournalItem
            key={journal.id} // Unik√°tn√≠ kl√≠ƒç pro ka≈æd√Ω den√≠k
            journal={journal} // P≈ôed√°n√≠ dat den√≠ku do komponenty JournalItem
            onDelete={handleDelete(journal.id)} // Funkce pro smaz√°n√≠ den√≠ku
            onRename={handleRename(journal.id)} // Funkce pro p≈ôejmenov√°n√≠ den√≠ku
          />
        ))}
      </div>
    </DataLoader>
  );
};

export default JournalList;
